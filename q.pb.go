// Code generated by protoc-gen-go. DO NOT EDIT.
// source: q.proto

/*
Package qsim is a generated protocol buffer package.

It is generated from these files:
	q.proto

It has these top-level messages:
	Q
	None
	QRequest
	ApplyRequest
	ControlledRequest
	QResponse
*/
package qsim

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import qubit "."
import math1 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Q struct {
	Qubit *qubit.Qubit `protobuf:"bytes,1,opt,name=qubit" json:"qubit,omitempty"`
}

func (m *Q) Reset()                    { *m = Q{} }
func (m *Q) String() string            { return proto.CompactTextString(m) }
func (*Q) ProtoMessage()               {}
func (*Q) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Q) GetQubit() *qubit.Qubit {
	if m != nil {
		return m.Qubit
	}
	return nil
}

type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QRequest struct {
	Q []*Q `protobuf:"bytes,1,rep,name=q" json:"q,omitempty"`
}

func (m *QRequest) Reset()                    { *m = QRequest{} }
func (m *QRequest) String() string            { return proto.CompactTextString(m) }
func (*QRequest) ProtoMessage()               {}
func (*QRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QRequest) GetQ() []*Q {
	if m != nil {
		return m.Q
	}
	return nil
}

type ApplyRequest struct {
	M *math1.Matrix `protobuf:"bytes,1,opt,name=m" json:"m,omitempty"`
	Q []*Q          `protobuf:"bytes,2,rep,name=q" json:"q,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ApplyRequest) GetM() *math1.Matrix {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *ApplyRequest) GetQ() []*Q {
	if m != nil {
		return m.Q
	}
	return nil
}

type ControlledRequest struct {
	Control []*Q  `protobuf:"bytes,1,rep,name=control" json:"control,omitempty"`
	Target  *Q    `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	K       int64 `protobuf:"varint,3,opt,name=k" json:"k,omitempty"`
}

func (m *ControlledRequest) Reset()                    { *m = ControlledRequest{} }
func (m *ControlledRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlledRequest) ProtoMessage()               {}
func (*ControlledRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ControlledRequest) GetControl() []*Q {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *ControlledRequest) GetTarget() *Q {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ControlledRequest) GetK() int64 {
	if m != nil {
		return m.K
	}
	return 0
}

type QResponse struct {
	Q *Q `protobuf:"bytes,1,opt,name=q" json:"q,omitempty"`
}

func (m *QResponse) Reset()                    { *m = QResponse{} }
func (m *QResponse) String() string            { return proto.CompactTextString(m) }
func (*QResponse) ProtoMessage()               {}
func (*QResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QResponse) GetQ() *Q {
	if m != nil {
		return m.Q
	}
	return nil
}

func init() {
	proto.RegisterType((*Q)(nil), "qsim.Q")
	proto.RegisterType((*None)(nil), "qsim.None")
	proto.RegisterType((*QRequest)(nil), "qsim.QRequest")
	proto.RegisterType((*ApplyRequest)(nil), "qsim.ApplyRequest")
	proto.RegisterType((*ControlledRequest)(nil), "qsim.ControlledRequest")
	proto.RegisterType((*QResponse)(nil), "qsim.QResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Qsim service

type QsimClient interface {
	H(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	X(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	Y(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	Z(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	S(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	T(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*QResponse, error)
	ControlledR(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error)
	ControlledZ(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error)
	ControlledNOT(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error)
	QFT(ctx context.Context, in *None, opts ...grpc.CallOption) (*QResponse, error)
	InverseQFT(ctx context.Context, in *None, opts ...grpc.CallOption) (*QResponse, error)
}

type qsimClient struct {
	cc *grpc.ClientConn
}

func NewQsimClient(cc *grpc.ClientConn) QsimClient {
	return &qsimClient{cc}
}

func (c *qsimClient) H(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/H", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) X(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/X", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) Y(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/Y", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) Z(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/Z", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) S(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/S", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) T(ctx context.Context, in *QRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/T", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) ControlledR(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/ControlledR", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) ControlledZ(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/ControlledZ", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) ControlledNOT(ctx context.Context, in *ControlledRequest, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/ControlledNOT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) QFT(ctx context.Context, in *None, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/QFT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsimClient) InverseQFT(ctx context.Context, in *None, opts ...grpc.CallOption) (*QResponse, error) {
	out := new(QResponse)
	err := grpc.Invoke(ctx, "/qsim.Qsim/InverseQFT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Qsim service

type QsimServer interface {
	H(context.Context, *QRequest) (*QResponse, error)
	X(context.Context, *QRequest) (*QResponse, error)
	Y(context.Context, *QRequest) (*QResponse, error)
	Z(context.Context, *QRequest) (*QResponse, error)
	S(context.Context, *QRequest) (*QResponse, error)
	T(context.Context, *QRequest) (*QResponse, error)
	Apply(context.Context, *ApplyRequest) (*QResponse, error)
	ControlledR(context.Context, *ControlledRequest) (*QResponse, error)
	ControlledZ(context.Context, *ControlledRequest) (*QResponse, error)
	ControlledNOT(context.Context, *ControlledRequest) (*QResponse, error)
	QFT(context.Context, *None) (*QResponse, error)
	InverseQFT(context.Context, *None) (*QResponse, error)
}

func RegisterQsimServer(s *grpc.Server, srv QsimServer) {
	s.RegisterService(&_Qsim_serviceDesc, srv)
}

func _Qsim_H_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).H(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/H",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).H(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_X_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).X(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/X",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).X(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_Y_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).Y(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/Y",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).Y(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_Z_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).Z(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/Z",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).Z(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).S(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_T_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).T(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/T",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).T(ctx, req.(*QRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_ControlledR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).ControlledR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/ControlledR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).ControlledR(ctx, req.(*ControlledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_ControlledZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).ControlledZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/ControlledZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).ControlledZ(ctx, req.(*ControlledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_ControlledNOT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).ControlledNOT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/ControlledNOT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).ControlledNOT(ctx, req.(*ControlledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_QFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).QFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/QFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).QFT(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qsim_InverseQFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsimServer).InverseQFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsim.Qsim/InverseQFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsimServer).InverseQFT(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

var _Qsim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qsim.Qsim",
	HandlerType: (*QsimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "H",
			Handler:    _Qsim_H_Handler,
		},
		{
			MethodName: "X",
			Handler:    _Qsim_X_Handler,
		},
		{
			MethodName: "Y",
			Handler:    _Qsim_Y_Handler,
		},
		{
			MethodName: "Z",
			Handler:    _Qsim_Z_Handler,
		},
		{
			MethodName: "S",
			Handler:    _Qsim_S_Handler,
		},
		{
			MethodName: "T",
			Handler:    _Qsim_T_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Qsim_Apply_Handler,
		},
		{
			MethodName: "ControlledR",
			Handler:    _Qsim_ControlledR_Handler,
		},
		{
			MethodName: "ControlledZ",
			Handler:    _Qsim_ControlledZ_Handler,
		},
		{
			MethodName: "ControlledNOT",
			Handler:    _Qsim_ControlledNOT_Handler,
		},
		{
			MethodName: "QFT",
			Handler:    _Qsim_QFT_Handler,
		},
		{
			MethodName: "InverseQFT",
			Handler:    _Qsim_InverseQFT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "q.proto",
}

func init() { proto.RegisterFile("q.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x1d, 0x5a, 0x40, 0xa7, 0xa8, 0x61, 0x13, 0x63, 0x53, 0x0f, 0xc2, 0xc6, 0x28, 0x89,
	0x49, 0x4d, 0xd0, 0x8b, 0xf1, 0x04, 0x26, 0x46, 0x0f, 0xa2, 0xad, 0x1c, 0x94, 0x5b, 0xc1, 0x0d,
	0x34, 0xd0, 0xbf, 0xbb, 0x18, 0xf5, 0x33, 0xf9, 0x21, 0x4d, 0xbb, 0x16, 0x51, 0x48, 0x28, 0x97,
	0xa6, 0x9d, 0xf7, 0x9b, 0x37, 0xdb, 0xbc, 0x1d, 0x2c, 0x47, 0x66, 0x18, 0x07, 0x22, 0x20, 0x6a,
	0xc4, 0x5d, 0xcf, 0xd0, 0xa2, 0x69, 0xdf, 0x15, 0xb2, 0x64, 0xa0, 0xe7, 0x88, 0x91, 0x7c, 0xa7,
	0x27, 0x08, 0x16, 0xa1, 0x58, 0x4c, 0x75, 0x1d, 0x6a, 0xd0, 0xd0, 0x9a, 0x15, 0x53, 0xd2, 0x56,
	0xf2, 0xb4, 0xa5, 0x44, 0x4b, 0xa8, 0x76, 0x02, 0x9f, 0xd1, 0x3a, 0x6e, 0x5a, 0x36, 0x8b, 0xa6,
	0x8c, 0x0b, 0xb2, 0x87, 0x10, 0xe9, 0x50, 0x53, 0x1a, 0x5a, 0xb3, 0x6c, 0x26, 0x73, 0x4c, 0xcb,
	0x86, 0x88, 0xb6, 0xb0, 0xd2, 0x0a, 0xc3, 0xc9, 0x47, 0x86, 0x19, 0x08, 0xde, 0xcc, 0x3a, 0x9d,
	0x7d, 0xef, 0x88, 0xd8, 0x7d, 0xb7, 0xc1, 0x93, 0x16, 0x85, 0x05, 0x0b, 0x86, 0xd5, 0xeb, 0xc0,
	0x17, 0x71, 0x30, 0x99, 0xb0, 0xd7, 0xcc, 0xa7, 0x8e, 0xe5, 0x81, 0x2c, 0xfe, 0x1f, 0x9a, 0xd5,
	0xc9, 0x21, 0x96, 0x84, 0x13, 0x0f, 0x99, 0xd0, 0x0b, 0xe9, 0xbc, 0x19, 0xf1, 0x53, 0x26, 0x15,
	0x84, 0xb1, 0xae, 0xd4, 0xa0, 0xa1, 0xd8, 0x30, 0xa6, 0x14, 0xb7, 0x2c, 0x9b, 0xf1, 0x30, 0xf0,
	0x39, 0xcb, 0xfe, 0x06, 0xfe, 0x1e, 0xa5, 0xf9, 0xa5, 0xa2, 0x6a, 0x71, 0xd7, 0x23, 0xc7, 0x08,
	0xb7, 0x64, 0x27, 0x53, 0xe4, 0x99, 0x8c, 0xdd, 0xd9, 0xb7, 0x74, 0xa1, 0x1b, 0x09, 0xf7, 0x9c,
	0x93, 0x7b, 0xc9, 0xc9, 0xf5, 0x72, 0x72, 0x4f, 0x39, 0xb9, 0x6e, 0x1e, 0xce, 0xc4, 0x62, 0x1a,
	0x23, 0x21, 0x52, 0x9b, 0xcf, 0x74, 0x19, 0x7f, 0x89, 0xda, 0x5c, 0x66, 0x64, 0x5f, 0x12, 0x0b,
	0x31, 0xae, 0x6c, 0xed, 0xad, 0xd5, 0x7a, 0x85, 0xdb, 0xbf, 0x5c, 0xe7, 0xa1, 0xbb, 0x56, 0xf3,
	0x11, 0x2a, 0xd6, 0x4d, 0x97, 0xa0, 0x54, 0x92, 0xfb, 0xbd, 0x8c, 0x3a, 0x45, 0xbc, 0xf3, 0xdf,
	0x58, 0xcc, 0xd9, 0x6a, 0xb8, 0x7d, 0x80, 0xd5, 0x41, 0xe0, 0x99, 0x43, 0x57, 0x8c, 0xa6, 0xfd,
	0x33, 0xee, 0x8c, 0x2e, 0xd8, 0x67, 0x3b, 0x5d, 0xc2, 0x47, 0xe8, 0x97, 0xd2, 0xa5, 0x3b, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x37, 0xc4, 0x91, 0x9e, 0x03, 0x00, 0x00,
}
